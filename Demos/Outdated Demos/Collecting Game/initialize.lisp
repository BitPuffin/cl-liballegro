(in-package #:game)

(defmacro with-event-slots (vars ev &body body)
  `(with-foreign-slots (,vars ,ev al:allegro-event)
     ,@body))
(defmacro with-mouse-slots (vars mouse &body body)
  `(with-foreign-slots (,vars ,mouse allegro-mouse-event)
     ,@body))
(defmacro with-keyboard-slots (vars kb &body body)
  `(with-foreign-slots (,vars ,kb al:allegro-keyboard-event)
     ,@body))

(defun keyboard-event-type-p (event-type)
  (if (or (= event-type al:+allegro-event-key-down+)
	  (= event-type al:+allegro-event-key-up+)
	  ;(= event-type al:+allegro-event-key-char+)
	  )
      t
      nil))
(defmacro keystate (key) `(gethash ,key *key-state*))
(defun keyboard-handler (kb)
  (with-keyboard-slots (al::type al::keycode) kb
    (if (= al::type al:+allegro-event-key-down+)
	(setf (keystate al::keycode) t))
    (if (= al::type al:+allegro-event-key-up+)
	;(setf (keystate al::keycode) nil)
	(remhash al::keycode *key-state*))))

(defun mouse-event-type-p (event-type)
  (if (or (= event-type al:+allegro-event-mouse-axes+)
	  (= event-type al:+allegro-event-mouse-button-down+)
	  (= event-type al:+allegro-event-mouse-button-up+))
      t
      nil))
(defmacro mousestate (key) `(gethash ,key *mouse-state*))
(defun mouse-handler (mouse)
  (with-mouse-slots (al::type al::x al::y al::button) mouse
    (when (= al::type al:+allegro-event-mouse-axes+)
      (setf (mousestate 'x) al::x)
      (setf (mousestate 'y) al::y))
    (when (= al::type al:+allegro-event-mouse-button-down+)
      (setf (mousestate 'x) al::x)
      (setf (mousestate 'y) al::y)
      (setf (mousestate al::button) t))
    (when (= al::type al:+allegro-event-mouse-button-up+)
      (setf (mousestate 'x) al::x)
      (setf (mousestate 'y) al::y)
      (setf (mousestate al::button) nil))))

(defun event-handler (event)
  (with-event-slots (al::type al::keyboard al::mouse) event
    (cond ((= al::type al:+allegro-event-display-close+) (quit))
	  ((keyboard-event-type-p al::type) (keyboard-handler al::keyboard))
	  ((mouse-event-type-p al::type) (mouse-handler al::mouse)))))
  
  
(defun quit () (setf *game-running-p* nil))
(defun shutdown () (al:uninstall-system))

(defun initialize-allegro ()
  (al:init)
  (al:init-image-addon)
  (al:init-font-addon)
  (al:init-ttf-addon))
(defun initialize-event-queue ()
  (setf *event-queue* (al:create-event-queue)))
(defun initialize-timer ()
  (let ((timer (al:create-timer *dt*)))
    (al:register-event-source *event-queue* timer)
    (al:start-timer timer)))
(defun initialize-display ()
  (setf *display* (al:create-display 800 600))
  (al:register-event-source *event-queue* (al:get-display-event-source *display*))
  (al:clear-to-color 0 0 0 1)
  (al:flip-display))
(defun initialize-mouse ()
  (al:install-mouse)
  (setf *mouse-state* (make-hash-table))
  (setf (gethash 'x *mouse-state*) 0)
  (setf (gethash 'y *mouse-state*) 0)
  (al:register-event-source *event-queue* (al:get-mouse-event-source)))
(defun initialize-keyboard ()
  (al:install-keyboard)
  (setf *key-state* (make-hash-table))
  (al:register-event-source *event-queue* (al:get-keyboard-event-source)))

(defun startup ()
  (initialize-allegro)
  (initialize-event-queue)
  (initialize-display)
  (initialize-mouse)
  (initialize-keyboard)
  (load-game)
  (sb-ext:gc :full t))

(defun game-loop ()
  (let ((event (foreign-alloc 'allegro-event))
	(current-time (get-internal-real-time))
	(new-time)
	(frame-time 0.0)
	(timer-dt (/ 1000.0 *fps*))
	(accumulator 0.0))
    (loop while *game-running-p* do
	 (setf new-time (get-internal-real-time))
	 (setf frame-time (- new-time current-time))
	 (if (> frame-time timer-dt)
	     (setf frame-time timer-dt))
	 (setf current-time new-time)
	 (incf accumulator frame-time)
	 (loop while (>= accumulator timer-dt) do
	      (loop while (al:get-next-event *event-queue* event) do
		   (event-handler event))
	      (update)
	      (decf accumulator timer-dt))
	 (render))))

(defun main ()
  (startup)
  (game-loop)
  (shutdown))
