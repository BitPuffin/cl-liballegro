(defpackage :jump-demo
  (:use common-lisp :allegro :cffi)
  (:export main))

(in-package :jump-demo)

(defmacro test (thing)
  `(progn
     (format t "~a is being tested~%" ',thing) 
     (when (not ,thing)
       (error "Test Failed"))))

(defparameter *game-running* t)
(defparameter *fps* 125)
(defparameter *timer-dt* (/ 1.0d0 *fps*)) 
(defparameter *dt* (coerce *timer-dt* 'single-float))

(defvar timer)
(defvar image)
(defvar sample) ; 36 x 52
(defvar display)
(defvar event-queue)
(defparameter sample-name (foreign-string-alloc "test.wav"))
(defparameter image-name (foreign-string-alloc "test.png"))

(defun initialize-allegro ()
  (test (al-init))
  (test (al-install-audio))
  (test (al-init-acodec-addon))
  (test (al-init-image-addon))
  (test (al-install-keyboard))
  (test (al-install-mouse))
  (test (al-reserve-samples 10)))

(defun load-assets ()
  (test (setf image (al-load-bitmap image-name)))
  (test (setf sample (al-load-sample sample-name)))
  (test (setf timer (al-create-timer *timer-dt*)))
  (test (setf display (al-create-display 800 600)))
  (test (setf event-queue (al-create-event-queue)))
  (al-register-event-source event-queue (al-get-timer-event-source timer))
  (al-register-event-source event-queue (al-get-display-event-source display))
  (al-register-event-source event-queue (al-get-keyboard-event-source))
  (al-register-event-source event-queue (al-get-mouse-event-source))
  (al-start-timer timer))
  
(defun initialize-level ()
  (load-assets))

(defparameter g 900)
(defparameter dx 0.0)
(defparameter dy 0.0)
(defparameter x 0.0)
(defparameter y (- 600.0 52))
(defparameter jumping nil)
(defparameter double-jumping nil)
(defparameter flip-p 0)

(defun update ()
  (incf x (* dx *dt*))
  (incf dy (* g *dt*))
  (incf y (* dy *dt*))
  (when (< x 0)
    (setf x 0.0))
  (when (> x (- 800.0 36))
    (setf x (- 800.0 36)))
  (when (> y (- 600.0 52))
    (setf jumping nil)
    (setf double-jumping nil)
    (setf dy 0.0)
    (setf y (- 600.0 52))))

(defun display ()
  (al-clear-to-color 0.0 0.0 0.0 1.0)
  (al-draw-bitmap image x y flip-p)
  (al-flip-display))

(defun jump ()
  (when (or (not jumping) (not double-jumping))
    (if jumping
	(setf double-jumping t))
    (setf jumping t)
    (al-play-sample sample
		    1.0 0.0 1.0
		    +allegro-playmode-once+
		    (null-pointer))
    (setf dy -400.0)))

(defun key-pressed (keycode)
  (when (= keycode +allegro-key-right+)
    (incf dx 200.0)
    (setf flip-p +allegro-flip-horizontal+))
  (when (= keycode +allegro-key-left+)
    (setf flip-p 0)
    (decf dx 200.0))
  (if (= keycode +allegro-key-space+)
      (jump)))
(defun key-released (keycode)
  (if (= keycode +allegro-key-right+)
      (decf dx 200.0))
  (if (= keycode +allegro-key-left+)
      (incf dx 200.0)))  

(defun game-loop ()
  (let ((redraw t)
	(ev (foreign-alloc 'allegro-event)))
    (with-foreign-slots ((type keyboard) ev allegro-event)
      (loop while *game-running* do
	   (al-wait-for-event event-queue ev)
	   (if (= type +allegro-event-display-close+)
	       (return))
	   (with-foreign-slots ((keycode) keyboard allegro-keyboard-event)  
	     (if (= type +allegro-event-key-down+)
		 (key-pressed keycode))
	     (if (= type +allegro-event-key-up+)
		 (key-released keycode)))
	   (when (= type +allegro-event-timer+)
	     (setf redraw t)
	     (update))
	   (when (and redraw (al-is-event-queue-empty event-queue))
	     (setf redraw nil)
	     (display))))))

(defun game-shutdown ()
  (al-destroy-sample sample)
  (al-destroy-timer timer)
  (al-destroy-bitmap image)
  (al-destroy-event-queue event-queue)
  (al-destroy-display display)
  (al-uninstall-system))

(defun game-init ()
  (initialize-allegro)
  (initialize-level))

(defun main ()
  (game-init)
  (game-loop)
  (game-shutdown))
